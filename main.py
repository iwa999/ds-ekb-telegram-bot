#!/usr/bin/env python3
"""
DS EKB Telegram Bot —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π amoCRM
–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
"""

import os
import logging
import asyncio
import json
import re
import requests
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes, ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
WAITING_FOR_SERVICE, WAITING_FOR_DETAILS, WAITING_FOR_CONTACT = range(3)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # Telegram Bot Token
    TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', '7437623986:AAFj-sItRC4s889Sop2mglRE7SE2c-drTCY')
    
    # amoCRM Configuration - –°–¢–†–û–ö–ê 42 –ò–°–ü–†–ê–í–õ–ï–ù–ê
    AMOCRM_CLIENT_ID = "c48e1e09-855a-47c2-8d7c-2ca33e168b1c"
    AMOCRM_CLIENT_SECRET = "wgeSGmOD4GVijBNBKOdtI58B7Zuxtw2lrnMbY0M2Asb47rnvrhmLYORIaQeVP4rQ"
    AMOCRM_SUBDOMAIN = "ekbamodseru"
    AMOCRM_LONG_TOKEN = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImI4YWFlMGU1ODA2Nzc1MDAzMjFmMjlhNDYyODI1ZTQ3NjY3MDNkOThjOGE2NDQ1YTNhNTg1M2Y5NDg3YWJjMzU4MGIyNDhmMTAzZjdkZmFmIn0.eyJhdWQiOiJjNDhlMWUwOS04NTVhLTQ3YzItOGQ3Yy0yY2EzM2UxNjhiMWMiLCJqdGkiOiJiOGFhZTBlNTgwNjc3NTAwMzIxZjI5YTQ2MjgyNWU0NzY2NzAzZDk4YzhhNjQ0NWEzYTU4NTNmOTQ4N2FiYzM1ODBiMjQ4ZjEwM2Y3ZGZhZiIsImlhdCI6MTc1MDI2MzQyNSwibmJmIjoxNzUwMjYzNDI1LCJleHAiOjE4NDIzMDcyMDAsInN1YiI6IjEyNjQwMzA2IiwiZ3JhbnRfdHlwZSI6IiIsImFjY291bnRfaWQiOjMyNDk0NTU4LCJiYXNlX2RvbWFpbiI6ImFtb2NybS5ydSIsInZlcnNpb24iOjIsInNjb3BlcyI6WyJjcm0iLCJmaWxlcyIsImZpbGVzX2RlbGV0ZSIsIm5vdGlmaWNhdGlvbnMiLCJwdXNoX25vdGlmaWNhdGlvbnMiXSwiaGFzaF91dWlkIjoiMDBiZDI4ZTMtYTllZS00ZmFiLWI5N2MtYjk0OTdiMDY2MzY4IiwiYXBpX2RvbWFpbiI6ImFwaS1iLmFtb2NybS5ydSJ9.HvgSDyxs_Lw0opRU7XW95zv1L65Mz-F0XAXdUl_Xwddx6pqP2OXUPXAK-Gr-k85-8nZUV0rtp9fkXHpVh6GpJrKgrnhNCWkv5YHBx29TJj8G-mQEomfrHFv-uzMQt6DY4cktWPAytRqXdloYbv4c_hkMElbqt5M8-fY3GAJY3xLrqzpDtclUh-Hcfyun6-st23-hHdJDWAWCrZxLYK7LcHICZ9XG8EXrx-rNVW_OSRponiYacNAVDW30n-F5hgOdnhrfxAKa-ies35ZakaAHLWtezFl-DP4d0mIQWEVJfeuBAA2LsQng-ct1jbzCnhEGISR4RVviTLufiQrBR9Qp2Q"
    
    # API URLs
    AMOCRM_API_URL = f"https://{AMOCRM_SUBDOMAIN}.amocrm.ru/api/v4"
    
    # –ö–æ–º–ø–∞–Ω–∏—è
    COMPANY_NAME = "–î–° –ï–ö–ë"
    COMPANY_PHONE = "+7 922 130-83-65"
    
    # –£—Å–ª—É–≥–∏
    SERVICES = {
        "ventilation": {
            "name": "üå¨Ô∏è –í–µ–Ω—Ç–∏–ª—è—Ü–∏—è",
            "description": "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, —á–∏—Å—Ç–∫–∞ –∏ –¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º",
            "price_from": 3500
        },
        "conditioning": {
            "name": "‚ùÑÔ∏è –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", 
            "description": "–†–µ–º–æ–Ω—Ç –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤",
            "price_from": 1500
        },
        "refrigeration": {
            "name": "üßä –•–æ–ª–æ–¥–∏–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
            "description": "–†–µ–º–æ–Ω—Ç –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–≥–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
            "price_from": 5000
        }
    }

class AmoCRMManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å amoCRM API"""
    
    def __init__(self):
        self.config = Config()
        self.access_token = None
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'DS-EKB-TelegramBot/1.0',
            'Content-Type': 'application/json'
        })
    
    async def get_access_token(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ access token –¥–ª—è API"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç–æ–∫–µ–Ω
            if self.config.AMOCRM_LONG_TOKEN:
                self.access_token = self.config.AMOCRM_LONG_TOKEN
                logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç–æ–∫–µ–Ω amoCRM")
                return self.access_token
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º OAuth
            url = f"{self.config.AMOCRM_API_URL}/oauth2/access_token"
            data = {
                "client_id": self.config.AMOCRM_CLIENT_ID,
                "client_secret": self.config.AMOCRM_CLIENT_SECRET,
                "grant_type": "authorization_code",
                "code": "authorization_code_here",
                "redirect_uri": "https://example.com"
            }
            
            response = self.session.post(url, json=data)
            if response.status_code == 200:
                token_data = response.json()
                self.access_token = token_data.get('access_token')
                logger.info("–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π access token")
                return self.access_token
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return None
    
    async def create_contact(self, user_data: Dict[str, Any]) -> Optional[int]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ amoCRM"""
        try:
            if not self.access_token:
                await self.get_access_token()
            
            url = f"{self.config.AMOCRM_API_URL}/contacts"
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            contact_data = self._extract_contact_info(user_data)
            
            headers = {
                'Authorization': f'Bearer {self.access_token}',
                'Content-Type': 'application/json'
            }
            
            payload = [
                {
                    "name": contact_data.get('name', f"–ö–ª–∏–µ–Ω—Ç –∏–∑ Telegram"),
                    "custom_fields_values": []
                }
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
            if contact_data.get('phone'):
                payload[0]["custom_fields_values"].append({
                    "field_id": 264911,  # ID –ø–æ–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                    "values": [{"value": contact_data['phone'], "enum_code": "WORK"}]
                })
            
            # –î–æ–±–∞–≤–ª—è–µ–º Telegram username
            if user_data.get('telegram_username'):
                payload[0]["custom_fields_values"].append({
                    "field_id": 264913,  # ID –ø–æ–ª—è –¥–ª—è Telegram
                    "values": [{"value": f"@{user_data['telegram_username']}"}]
                })
            
            response = self.session.post(url, headers=headers, json=payload)
            
            if response.status_code in [200, 201]:
                result = response.json()
                contact_id = result['_embedded']['contacts'][0]['id']
                logger.info(f"–°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç ID: {contact_id}")
                return contact_id
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {response.status_code}, {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            return None
    
    async def create_deal(self, user_data: Dict[str, Any], contact_id: Optional[int] = None) -> Optional[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ amoCRM"""
        try:
            if not self.access_token:
                await self.get_access_token()
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            if not contact_id:
                contact_id = await self.create_contact(user_data)
            
            url = f"{self.config.AMOCRM_API_URL}/leads"
            
            headers = {
                'Authorization': f'Bearer {self.access_token}',
                'Content-Type': 'application/json'
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ª—É–≥—É –∏ —Ü–µ–Ω—É
            service_info = self._extract_service_info(user_data.get('message', ''))
            
            deal_name = f"HVAC –∑–∞—è–≤–∫–∞ - {service_info['service_name']}"
            deal_price = service_info['price']
            
            payload = [
                {
                    "name": deal_name,
                    "price": deal_price,
                    "pipeline_id": 7851058,  # ID –≤–æ—Ä–æ–Ω–∫–∏
                    "status_id": 63505518,   # ID —Å—Ç–∞—Ç—É—Å–∞ "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"
                    "contacts": [{"id": contact_id}] if contact_id else [],
                    "custom_fields_values": [
                        {
                            "field_id": 264915,  # ID –ø–æ–ª—è "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"
                            "values": [{"value": user_data.get('message', '')}]
                        },
                        {
                            "field_id": 264917,  # ID –ø–æ–ª—è "–ò—Å—Ç–æ—á–Ω–∏–∫"
                            "values": [{"value": "Telegram Bot"}]
                        },
                        {
                            "field_id": 264919,  # ID –ø–æ–ª—è "–¢–∏–ø —É—Å–ª—É–≥–∏"
                            "values": [{"value": service_info['service_name']}]
                        }
                    ]
                }
            ]
            
            response = self.session.post(url, headers=headers, json=payload)
            
            if response.status_code in [200, 201]:
                result = response.json()
                deal_data = result['_embedded']['leads'][0]
                deal_id = deal_data['id']
                
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Å–¥–µ–ª–∫–∞ ID: {deal_id}")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                await self.create_task(deal_id, contact_id, user_data)
                
                return {
                    'deal_id': deal_id,
                    'deal_name': deal_name,
                    'price': deal_price,
                    'service': service_info['service_name']
                }
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏: {response.status_code}, {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
            return None
    
    async def create_task(self, deal_id: int, contact_id: Optional[int], user_data: Dict[str, Any]) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        try:
            url = f"{self.config.AMOCRM_API_URL}/tasks"
            
            headers = {
                'Authorization': f'Bearer {self.access_token}',
                'Content-Type': 'application/json'
            }
            
            # –ó–∞–¥–∞—á–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00
            tomorrow = datetime.now() + timedelta(days=1)
            complete_till = int(tomorrow.replace(hour=10, minute=0).timestamp())
            
            task_text = f"""
üîî –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ò–ó TELEGRAM

üë§ –ö–ª–∏–µ–Ω—Ç: {user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üì± Telegram: @{user_data.get('telegram_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {self._extract_phone(user_data.get('message', ''))}

üìù –ó–∞—è–≤–∫–∞:
{user_data.get('message', '')}

üéØ –î–µ–π—Å—Ç–≤–∏—è:
1. –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤
2. –£—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
3. –ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞
4. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏
            """.strip()
            
            payload = [
                {
                    "text": task_text,
                    "complete_till": complete_till,
                    "entity_id": deal_id,
                    "entity_type": "leads",
                    "task_type_id": 1,  # –ó–≤–æ–Ω–æ–∫
                    "responsible_user_id": 12640306  # ID –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
                }
            ]
            
            response = self.session.post(url, headers=headers, json=payload)
            
            if response.status_code in [200, 201]:
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ {deal_id}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            return False
    
    def _extract_contact_info(self, user_data: Dict[str, Any]) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = user_data.get('message', '')
        
        # –ü–æ–∏—Å–∫ –∏–º–µ–Ω–∏
        name_patterns = [
            r'(?:–º–µ–Ω—è –∑–æ–≤—É—Ç|—è|–∏–º—è)[:\s]*([–ê-–Ø–∞-—è–Å—ë\s]+)',
            r'([–ê-–Ø][–∞-—è]+)[,\s]',
            r'^([–ê-–Ø][–∞-—è]+)'
        ]
        
        name = None
        for pattern in name_patterns:
            match = re.search(pattern, message)
            if match:
                name = match.group(1).strip()
                break
        
        # –ü–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone = self._extract_phone(message)
        
        return {
            'name': name or f"{user_data.get('first_name', '–ö–ª–∏–µ–Ω—Ç')} –∏–∑ Telegram",
            'phone': phone
        }
    
    def _extract_phone(self, text: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        phone_patterns = [
            r'\+7[- ]?\(?(\d{3})\)?[- ]?(\d{3})[- ]?(\d{2})[- ]?(\d{2})',
            r'8[- ]?\(?(\d{3})\)?[- ]?(\d{3})[- ]?(\d{2})[- ]?(\d{2})',
            r'(\d{3})[- ]?(\d{3})[- ]?(\d{2})[- ]?(\d{2})'
        ]
        
        for pattern in phone_patterns:
            match = re.search(pattern, text)
            if match:
                if pattern.startswith(r'\+7'):
                    return f"+7 {match.group(1)} {match.group(2)}-{match.group(3)}-{match.group(4)}"
                elif pattern.startswith(r'8'):
                    return f"+7 {match.group(1)} {match.group(2)}-{match.group(3)}-{match.group(4)}"
                else:
                    return f"+7 {match.group(1)} {match.group(2)}-{match.group(3)}-{match.group(4)}"
        
        return None
    
    def _extract_service_info(self, message: str) -> Dict[str, Any]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message_lower = message.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏
        service_keywords = {
            "ventilation": ["–≤–µ–Ω—Ç–∏–ª—è—Ü", "–≤–æ–∑–¥—É—Ö", "–ø—Ä–∏—Ç–æ–∫", "–≤—ã—Ç—è–∂–∫", "—á–∏—Å—Ç", "–¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü"],
            "conditioning": ["–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω", "—Å–ø–ª–∏—Ç", "–∫–ª–∏–º–∞—Ç", "—Ö–æ–ª–æ–¥", "—Ç–µ–ø–ª", "—Ñ—Ä–µ–æ–Ω"],
            "refrigeration": ["—Ö–æ–ª–æ–¥–∏–ª—å", "–º–æ—Ä–æ–∑–∏–ª—å", "–∫–∞–º–µ—Ä", "—á–∏–ª–ª–µ—Ä", "–∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä"]
        }
        
        max_score = 0
        detected_service = "conditioning"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        for service_key, keywords in service_keywords.items():
            score = sum(1 for keyword in keywords if keyword in message_lower)
            if score > max_score:
                max_score = score
                detected_service = service_key
        
        service_info = Config.SERVICES[detected_service]
        
        return {
            'service_key': detected_service,
            'service_name': service_info['name'],
            'price': service_info['price_from']
        }

class TelegramBotHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.amocrm = AmoCRMManager()
        self.config = Config()
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} ({user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [KeyboardButton("üîß AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"), KeyboardButton("üìã –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É")],
            [KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"), KeyboardButton("‚ùì FAQ")],
            [KeyboardButton("üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"), KeyboardButton("‚≠ê –û—Ç–∑—ã–≤—ã")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
        
        welcome_text = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {self.config.COMPANY_NAME}!

–Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–µ—Ö–Ω–∏–∫–∏.

üåü –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ü—Ä–æ–≤–µ—Å—Ç–∏ AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤–∞—à–µ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
‚Ä¢ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç
‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã

üëá –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É
        """
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def handle_ai_diagnostics(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        diagnostics_text = """
üîß AI-–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø

–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ:

üå¨Ô∏è –î–ª—è –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏:
‚Ä¢ –°–ª–∞–±—ã–π –ø—Ä–∏—Ç–æ–∫/–≤—ã—Ç—è–∂–∫–∞ –≤–æ–∑–¥—É—Ö–∞
‚Ä¢ –ü–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –∑–≤—É–∫–∏, –≤–∏–±—Ä–∞—Ü–∏—è
‚Ä¢ –ù–µ–ø—Ä–∏—è—Ç–Ω—ã–µ –∑–∞–ø–∞—Ö–∏
‚Ä¢ –ü—ã–ª—å –∏–∑ –≤–µ–Ω—Ç—Ä–µ—à–µ—Ç–æ–∫

‚ùÑÔ∏è –î–ª—è –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤:
‚Ä¢ –ü–ª–æ—Ö–æ –æ—Ö–ª–∞–∂–¥–∞–µ—Ç/–≥—Ä–µ–µ—Ç
‚Ä¢ –¢–µ—á–µ—Ç –≤–æ–¥–∞, –∫–æ–Ω–¥–µ–Ω—Å–∞—Ç
‚Ä¢ –°—Ç—Ä–∞–Ω–Ω—ã–µ –∑–≤—É–∫–∏
‚Ä¢ –ù–µ–ø—Ä–∏—è—Ç–Ω—ã–π –∑–∞–ø–∞—Ö
‚Ä¢ –ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è

üßä –î–ª—è —Ö–æ–ª–æ–¥–∏–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:
‚Ä¢ –ù–µ –¥–µ—Ä–∂–∏—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä
‚Ä¢ –ù–∞–ª–µ–¥—å, –ª–µ–¥
‚Ä¢ –°—Ç—Ä–∞–Ω–Ω—ã–µ –∑–≤—É–∫–∏

üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø—Ä–æ–≤–µ–¥—É AI-–∞–Ω–∞–ª–∏–∑!
        """
        
        await update.message.reply_text(diagnostics_text)
    
    async def handle_order_service(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥–∏"""
        services_text = """
üìã –ó–ê–ö–ê–ó –£–°–õ–£–ì–ò

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:

üå¨Ô∏è –í–ï–ù–¢–ò–õ–Ø–¶–ò–Ø (–æ—Ç 3,500‚ÇΩ)
‚Ä¢ –ß–∏—Å—Ç–∫–∞ –∏ –¥–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ  
‚Ä¢ –†–µ–º–æ–Ω—Ç –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
‚Ä¢ AI-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞

‚ùÑÔ∏è –ö–û–ù–î–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï (–æ—Ç 1,500‚ÇΩ)
‚Ä¢ –†–µ–º–æ–Ω—Ç —Å–ø–ª–∏—Ç-—Å–∏—Å—Ç–µ–º
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
‚Ä¢ AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π
‚Ä¢ –ó–∞–ø—Ä–∞–≤–∫–∞ —Ñ—Ä–µ–æ–Ω–æ–º

üßä –•–û–õ–û–î–ò–õ–¨–ù–û–ï –û–ë–û–†–£–î–û–í–ê–ù–ò–ï (–æ—Ç 5,000‚ÇΩ)
‚Ä¢ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏
‚Ä¢ –ú–æ—Ä–æ–∑–∏–ª—å–Ω—ã–µ –∫–∞–º–µ—Ä—ã
‚Ä¢ AI-–∫–æ–Ω—Ç—Ä–æ–ª—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
‚Ä¢ –ß–∏–ª–ª–µ—Ä—ã –∏ –ª—å–¥–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã

üí¨ –ù–∞–ø–∏—à–∏—Ç–µ:
‚Ä¢ –¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
‚Ä¢ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–∏–∑–∏—Ç–∞
        """
        
        await update.message.reply_text(services_text)
    
    async def handle_contacts(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        contacts_text = f"""
üìû –ö–û–ù–¢–ê–ö–¢–´ {self.config.COMPANY_NAME}

üè¢ –ê–¥—Ä–µ—Å: –≥. –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {self.config.COMPANY_PHONE}
üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 24/7

üí¨ –°–≤—è–∑—å:
‚Ä¢ Telegram: @ds_ekb_hvac
‚Ä¢ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: vk.com/ds_ekb

‚ö° –≠–ö–°–¢–†–ï–ù–ù–´–ô –í–´–ó–û–í:
–î–ª—è —Å—Ä–æ—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
{self.config.COMPANY_PHONE}

üéØ –ì–ê–†–ê–ù–¢–ò–ò:
‚Ä¢ –í—ã–µ–∑–¥ –º–∞—Å—Ç–µ—Ä–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ —Ä–∞–±–æ—Ç—ã –¥–æ 2 –ª–µ—Ç
‚Ä¢ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        """
        
        keyboard = [
            [KeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", request_contact=True)],
            [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        await update.message.reply_text(contacts_text, reply_markup=reply_markup)
    
    async def handle_faq(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ FAQ"""
        faq_text = """
‚ùì –ß–ê–°–¢–û –ó–ê–î–ê–í–ê–ï–ú–´–ï –í–û–ü–†–û–°–´

üî∏ –ö–∞–∫ –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–µ–¥–µ—Ç –º–∞—Å—Ç–µ—Ä?
–í —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞—è–≤–∫–∏

üî∏ –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –≤—ã–µ–∑–¥?
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ —Ä–µ–º–æ–Ω—Ç–∞

üî∏ –ö–∞–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ —Ä–∞–±–æ—Ç—ã?
–î–æ 2 –ª–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∏–¥–∞ —Ä–∞–±–æ—Ç

üî∏ –†–∞–±–æ—Ç–∞–µ—Ç–µ –ª–∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ?
–î–∞, —Ä–∞–±–æ—Ç–∞–µ–º 24/7 –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö

üî∏ –ú–æ–∂–Ω–æ –ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π?
–î–∞, –ø—Ä–∏–Ω–∏–º–∞–µ–º –Ω–∞–ª–∏—á–Ω—ã–µ –∏ –∫–∞—Ä—Ç—ã

üî∏ –ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –¢–û –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞?
‚Ä¢ –ß–∏—Å—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–≤–ª–µ–Ω–∏—è —Ñ—Ä–µ–æ–Ω–∞
‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω—Ç–∏–±–∞–∫—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–∞–≤–æ–º

üî∏ –ö–∞–∫ —á–∞—Å—Ç–æ —á–∏—Å—Ç–∏—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—é?
–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 1-2 —Ä–∞–∑–∞ –≤ –≥–æ–¥

üí¨ –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏—Ç–µ –∏–ª–∏ –∑–≤–æ–Ω–∏—Ç–µ!
        """
        
        await update.message.reply_text(faq_text)
    
    async def handle_calculator(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
        calculator_text = """
üí∞ –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –°–¢–û–ò–ú–û–°–¢–ò

–ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏:

üå¨Ô∏è –í–ï–ù–¢–ò–õ–Ø–¶–ò–Ø:
‚Ä¢ –ß–∏—Å—Ç–∫–∞ –±—ã—Ç–æ–≤–æ–π –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏: 3,500-5,000‚ÇΩ
‚Ä¢ –ß–∏—Å—Ç–∫–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π: 150-300‚ÇΩ/–ø–æ–≥.–º
‚Ä¢ –î–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã: +1,500‚ÇΩ
‚Ä¢ –ó–∞–º–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤: –æ—Ç 800‚ÇΩ

‚ùÑÔ∏è –ö–û–ù–î–ò–¶–ò–û–ù–ï–†–´:
‚Ä¢ –¢–û —Å–ø–ª–∏—Ç-—Å–∏—Å—Ç–µ–º—ã: 1,500-2,500‚ÇΩ
‚Ä¢ –ó–∞–ø—Ä–∞–≤–∫–∞ —Ñ—Ä–µ–æ–Ω–æ–º: 2,000-3,500‚ÇΩ
‚Ä¢ –†–µ–º–æ–Ω—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏: 3,000-8,000‚ÇΩ
‚Ä¢ –ó–∞–º–µ–Ω–∞ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞: 15,000-25,000‚ÇΩ

üßä –•–û–õ–û–î–ò–õ–¨–ù–û–ï –û–ë–û–†–£–î–û–í–ê–ù–ò–ï:
‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: 2,000‚ÇΩ
‚Ä¢ –†–µ–º–æ–Ω—Ç —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç–∞: 3,500-5,000‚ÇΩ
‚Ä¢ –ó–∞–º–µ–Ω–∞ –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞: 20,000-40,000‚ÇΩ
‚Ä¢ –¢–û –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∫–∞–º–µ—Ä—ã: 8,000-15,000‚ÇΩ

‚ö° –¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ—Å–ª–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏!

üìù –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ:
‚Ä¢ –¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ –ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è
        """
        
        await update.message.reply_text(calculator_text)
    
    async def handle_reviews(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∑—ã–≤–æ–≤"""
        reviews_text = """
‚≠ê –û–¢–ó–´–í–´ –ù–ê–®–ò–• –ö–õ–ò–ï–ù–¢–û–í

‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö.
"AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞—à–ª–∏ –ø—Ä–æ–±–ª–µ–º—É –∑–∞ 2 –º–∏–Ω—É—Ç—ã, –∫–æ—Ç–æ—Ä—É—é –Ω–µ –º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –ø–æ–ª–≥–æ–¥–∞. –†–µ–∫–æ–º–µ–Ω–¥—É—é!"

‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –û–û–û "–°—Ç—Ä–æ–π–ò–Ω–≤–µ—Å—Ç"
"–û–±—Å–ª—É–∂–∏–≤–∞–µ–º —É –Ω–∏—Ö –≤—Å—é —Ç–µ—Ö–Ω–∏–∫—É –≤ –æ—Ñ–∏—Å–µ. –ë—ã—Å—Ç—Ä–æ, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –û—Å–æ–±–µ–Ω–Ω–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."

‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –ú–∞—Ä–∏—è –ü.
"–ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–µ—Ö–∞–ª —á–µ—Ä–µ–∑ —á–∞—Å –ø–æ—Å–ª–µ –∑–∞—è–≤–∫–∏. –ü–æ—á–∏—Å—Ç–∏–ª –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä, —Å—Ç–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –Ω–æ–≤—ã–π. –¶–µ–Ω—ã –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–µ."

‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –†–µ—Å—Ç–æ—Ä–∞–Ω "–í–∫—É—Å"
"–†–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫. –†–∞–±–æ—Ç—É –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, –≥–∞—Ä–∞–Ω—Ç–∏—é –¥–∞–ª–∏ –Ω–∞ 2 –≥–æ–¥–∞."

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ 4.9/5.0 —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞
‚Ä¢ 98% –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ 1247+ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤

üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –º–æ–∂–Ω–æ –≤ –Ω–∞—à–∏—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö!
        """
        
        await update.message.reply_text(reviews_text)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        message_text = update.message.text
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} ({user.id}): {message_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        if message_text == "üîß AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞":
            await self.handle_ai_diagnostics(update, context)
            return
        elif message_text == "üìã –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É":
            await self.handle_order_service(update, context)
            return
        elif message_text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
            await self.handle_contacts(update, context)
            return
        elif message_text == "‚ùì FAQ":
            await self.handle_faq(update, context)
            return
        elif message_text == "üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
            await self.handle_calculator(update, context)
            return
        elif message_text == "‚≠ê –û—Ç–∑—ã–≤—ã":
            await self.handle_reviews(update, context)
            return
        elif message_text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            await self.start_command(update, context)
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∑–∞—è–≤–∫—É
        await self.process_user_request(update, context)
    
    async def process_user_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∑–∞—è–≤–∫–∏"""
        user = update.effective_user
        message_text = update.message.text
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ...\n\n"
            "ü§ñ AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É\n"
            "üìã –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞\n"
            "üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤!"
        )
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            'telegram_id': user.id,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'telegram_username': user.username,
            'message': message_text,
            'timestamp': datetime.now().isoformat()
        }
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É –≤ amoCRM
            deal_result = await self.amocrm.create_deal(user_data)
            
            if deal_result:
                # –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å–¥–µ–ª–∫–∞
                success_message = f"""
üéâ –ó–ê–Ø–í–ö–ê –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–ê!

üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #{deal_result['deal_id']}
üõ†Ô∏è –£—Å–ª—É–≥–∞: {deal_result['service']}
üí∞ –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç {deal_result['price']:,}‚ÇΩ

‚è∞ –ß–¢–û –î–ê–õ–¨–®–ï:
1. –ú–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤
2. –ü—Ä–æ–≤–µ–¥–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
3. –†–∞—Å—Å—á–∏—Ç–∞–µ—Ç —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç
4. –í—ã–ø–æ–ª–Ω–∏—Ç —Ä–µ–º–æ–Ω—Ç/–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ

üìû –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å: {self.config.COMPANY_PHONE}

–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ {self.config.COMPANY_NAME}! üôè
                """
                
                # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                keyboard = [
                    [KeyboardButton("üîß AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"), KeyboardButton("üìã –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É")],
                    [KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"), KeyboardButton("‚ùì FAQ")]
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                
                await update.message.reply_text(success_message, reply_markup=reply_markup)
                
            else:
                # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏, –Ω–æ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞
                await update.message.reply_text(
                    "‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.\n\n"
                    f"üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥—É–±–ª–∏—Ä—É–π—Ç–µ –∑–∞—è–≤–∫—É –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É {self.config.COMPANY_PHONE}\n\n"
                    "–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.\n\n"
                f"üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É {self.config.COMPANY_PHONE}\n\n"
                "–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–∂–µ–º –≤–∞–º —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É!"
            )
    
    async def handle_contact(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        contact = update.message.contact
        user = update.effective_user
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: {contact.phone_number} –æ—Ç {user.first_name}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.user_data['phone'] = contact.phone_number
        
        await update.message.reply_text(
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {contact.phone_number}\n\n"
            "–¢–µ–ø–µ—Ä—å –Ω–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞ —Å–º–æ–≥—É—Ç –±—ã—Å—Ç—Ä–µ–µ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è!\n\n"
            "üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ –º–µ–Ω—é."
        )
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling an update: {context.error}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
        if isinstance(update, Update) and update.effective_message:
            await update.effective_message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )

class DSEKBBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ DS EKB"""
    
    def __init__(self):
        self.config = Config()
        self.handlers = TelegramBotHandlers()
        self.application = None
    
    def setup_handlers(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.handlers.start_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        self.application.add_handler(MessageHandler(filters.CONTACT, self.handlers.handle_contact))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handlers.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.handlers.error_handler)
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    async def startup(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ {self.config.COMPANY_NAME}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º amoCRM –º–µ–Ω–µ–¥–∂–µ—Ä
        await self.handlers.amocrm.get_access_token()
        
        logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    async def shutdown(self) -> None:
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
    
    def run(self) -> None:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(self.config.TELEGRAM_TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.setup_handlers()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö—É–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        self.application.post_init = self.startup
        self.application.post_shutdown = self.shutdown
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ polling...")
        self.application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )

if __name__ == "__main__":
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = DSEKBBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
