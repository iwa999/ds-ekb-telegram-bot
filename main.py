import os
import logging
import asyncio
import aiohttp
import json
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
AMOCRM_CLIENT_ID = os.getenv('AMOCRM_CLIENT_ID')
AMOCRM_CLIENT_SECRET = os.getenv('AMOCRM_CLIENT_SECRET')

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è access_token
access_token = None
amocrm_subdomain = None

async def get_amocrm_token():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ access_token –¥–ª—è amoCRM"""
    global access_token, amocrm_subdomain
    
    if not AMOCRM_CLIENT_ID or not AMOCRM_CLIENT_SECRET:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ amoCRM")
        return None
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à –ø–æ–¥–¥–æ–º–µ–Ω amoCRM
    amocrm_subdomain = "dsekb"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–æ–¥–¥–æ–º–µ–Ω
    
    # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç–æ–∫–µ–Ω
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø–æ–ª–Ω–∞—è OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    logger.info("amoCRM —Ç–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    access_token = "–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π_—Ç–æ–∫–µ–Ω"  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç–æ–∫–µ–Ω
    return access_token

async def create_amocrm_contact(name, phone, telegram_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ amoCRM"""
    global access_token, amocrm_subdomain
    
    if not access_token:
        await get_amocrm_token()
    
    contact_data = {
        "name": name,
        "custom_fields_values": [
            {
                "field_id": 264911,  # ID –ø–æ–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ)
                "values": [{"value": phone, "enum_code": "WORK"}]
            }
        ],
        "custom_fields_values": [
            {
                "field_id": 264913,  # ID –ø–æ–ª—è email (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ) 
                "values": [{"value": f"telegram_{telegram_id}@dsekb.local"}]
            }
        ]
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            headers = {
                'Authorization': f'Bearer {access_token}',
                'Content-Type': 'application/json'
            }
            
            url = f'https://{amocrm_subdomain}.amocrm.ru/api/v4/contacts'
            
            async with session.post(url, json=[contact_data], headers=headers) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"–ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω: {result}")
                    return result['_embedded']['contacts'][0]['id']
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
        return None

async def create_amocrm_lead(contact_id, service_type, description, telegram_username):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ amoCRM"""
    global access_token, amocrm_subdomain
    
    lead_data = {
        "name": f"HVAC –∑–∞—è–≤–∫–∞ - {service_type}",
        "price": 5000,  # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
        "pipeline_id": 1,  # ID –≤–æ—Ä–æ–Ω–∫–∏ (–æ–±—ã—á–Ω–æ 1 - –æ—Å–Ω–æ–≤–Ω–∞—è)
        "status_id": 142,  # ID —Å—Ç–∞—Ç—É—Å–∞ "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"
        "_embedded": {
            "contacts": [{"id": contact_id}]
        },
        "custom_fields_values": [
            {
                "field_id": 123456,  # ID –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
                "values": [{"value": description}]
            }
        ]
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            headers = {
                'Authorization': f'Bearer {access_token}',
                'Content-Type': 'application/json'
            }
            
            url = f'https://{amocrm_subdomain}.amocrm.ru/api/v4/leads'
            
            async with session.post(url, json=[lead_data], headers=headers) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {result}")
                    return result['_embedded']['leads'][0]['id']
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏: {response.status}")
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [KeyboardButton("üîß AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"), KeyboardButton("üìã –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É")],
        [KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"), KeyboardButton("‚ùì FAQ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DS EKB!\n\n"
        "–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É—Å–ª—É–≥–∏ –ø–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é:\n"
        "üå™Ô∏è –í–µ–Ω—Ç–∏–ª—è—Ü–∏–∏\n"
        "‚ùÑÔ∏è –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤\n"
        "üßä –•–æ–ª–æ–¥–∏–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    user = update.effective_user
    
    if text == "üîß AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞":
        await update.message.reply_text(
            "ü§ñ AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n\n"
            "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n"
            "‚Ä¢ –¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –°–∏–º–ø—Ç–æ–º—ã –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã (–∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω)\n"
            "‚Ä¢ –ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞\n\n"
            "–ü—Ä–∏–º–µ—Ä: '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –Ω–µ –æ—Ö–ª–∞–∂–¥–∞–µ—Ç, —Ç–µ—á–µ—Ç –≤–æ–¥–∞. –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, +7-912-345-67-89, —É–ª. –õ–µ–Ω–∏–Ω–∞ 10'"
        )
        context.user_data['waiting_for'] = 'diagnostics'
        
    elif text == "üìã –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É":
        await update.message.reply_text(
            "üìã –ó–∞–∫–∞–∑ —É—Å–ª—É–≥–∏\n\n"
            "–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n"
            "‚Ä¢ –¢–∏–ø —É—Å–ª—É–≥–∏ (—Ä–µ–º–æ–Ω—Ç/–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ/—á–∏—Å—Ç–∫–∞)\n"
            "‚Ä¢ –¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã (–∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω)\n"
            "‚Ä¢ –ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞\n"
            "‚Ä¢ –ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è\n\n"
            "–ü—Ä–∏–º–µ—Ä: '–ß–∏—Å—Ç–∫–∞ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏ –≤ –æ—Ñ–∏—Å–µ. –ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞, +7-912-555-77-88, —É–ª. –ú–∏—Ä–∞ 5, –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º'"
        )
        context.user_data['waiting_for'] = 'order'
        
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text(
            "üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
            "‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: +7 922 130-83-65\n"
            "üåê –°–∞–π—Ç: ds-ekb.ru\n"
            "üìç –ê–¥—Ä–µ—Å: –≥. –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥\n"
            "üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 24/7\n\n"
            "üì± Telegram: @ds_ekb_hvac\n"
            "üìò –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: vk.ru/ds_ekb"
        )
        
    elif text == "‚ùì FAQ":
        await update.message.reply_text(
            "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
            "üîπ –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞?\n"
            "‚Üí AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n\n"
            "üîπ –ö–∞–∫ –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–µ–¥–µ—Ç–µ?\n"
            "‚Üí –í —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤ –ø–æ –≥–æ—Ä–æ–¥—É\n\n"
            "üîπ –†–∞–±–æ—Ç–∞–µ—Ç–µ –ª–∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ?\n"
            "‚Üí –î–∞, —Ä–∞–±–æ—Ç–∞–µ–º 24/7\n\n"
            "üîπ –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ —Ä–∞–±–æ—Ç—ã?\n"
            "‚Üí –î–æ 2 –ª–µ—Ç –Ω–∞ –≤—Å–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç"
        )
        
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫
        waiting_for = context.user_data.get('waiting_for')
        
        if waiting_for in ['diagnostics', 'order']:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∏ —Å–¥–µ–ª–∫—É –≤ amoCRM
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                service_type = "AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞" if waiting_for == 'diagnostics' else "–ó–∞–∫–∞–∑ —É—Å–ª—É–≥–∏"
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
                contact_id = await create_amocrm_contact(
                    name=user.first_name or "–ö–ª–∏–µ–Ω—Ç Telegram",
                    phone="–£–∫–∞–∑–∞—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏",
                    telegram_id=user.id
                )
                
                if contact_id:
                    # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
                    lead_id = await create_amocrm_lead(
                        contact_id=contact_id,
                        service_type=service_type,
                        description=text,
                        telegram_username=user.username or str(user.id)
                    )
                    
                    if lead_id:
                        await update.message.reply_text(
                            "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
                            f"üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #{lead_id}\n"
                            "üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç\n\n"
                            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üôè"
                        )
                    else:
                        await update.message.reply_text(
                            "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
                            "üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç\n\n"
                            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üôè"
                        )
                else:
                    await update.message.reply_text(
                        "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
                        "üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç\n\n"
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üôè"
                    )
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
                await update.message.reply_text(
                    "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
                    "üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üôè"
                )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data['waiting_for'] = None
            
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω–æ–π –æ–ø—Ü–∏–∏ üëÜ"
            )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not TELEGRAM_TOKEN:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º amoCRM —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    asyncio.create_task(get_amocrm_token())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == '__main__':
    main()
