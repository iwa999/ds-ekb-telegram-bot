#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DS-EKB Telegram Bot —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π amoCRM
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –∏–∑ –∑–∞—è–≤–æ–∫ –≤ Telegram
"""

import os
import logging
import json
import requests
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', '7437623986:AAFj-sItRC4s889Sop2mglRE7SE2c-drTCY')

# amoCRM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
AMOCRM_SUBDOMAIN = "ekbamodseru"
AMOCRM_ACCESS_TOKEN = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImVjN2RmYjU4ZGNiNTllZWUwM2MwZmNkYTYxMTE3NzQwNGViNTAzNjQ1NGRhYmZmZTAxNzVkYzMzMjBmMzFjMGJjNzRlZGI0ZmM2MTBhOTkwIn0.eyJhdWQiOiJjNDhlMWUwOS04NTVhLTQ3YzItOGQ3Yy0yY2EzM2UxNjhiMWMiLCJqdGkiOiJlYzdkZmI1OGRjYjU5ZWVlMDNjMGZjZGE2MTExNzc0MDRlYjUwMzY0NTRkYWJmZmUwMTc1ZGMzMzIwZjMxYzBiYzc0ZWRiNGZjNjEwYTk5MCIsImlhdCI6MTc1MDI1OTc1MSwibmJmIjoxNzUwMjU5NzUxLCJleHAiOjE4MTMyNzY4MDAsInN1YiI6IjEyNjQwMzA2IiwiZ3JhbnRfdHlwZSI6IiIsImFjY291bnRfaWQiOjMyNDk0NTU4LCJiYXNlX2RvbWFpbiI6ImFtb2NybS5ydSIsInZlcnNpb24iOjIsInNjb3BlcyI6WyJjcm0iLCJmaWxlcyIsImZpbGVzX2RlbGV0ZSIsIm5vdGlmaWNhdGlvbnMiLCJwdXNoX25vdGlmaWNhdGlvbnMiXSwiaGFzaF91dWlkIjoiNDRlMzU2YzktYmRjZS00MTA5LWEwNzktN2Q0OWEyNjk4ZjY4IiwiYXBpX2RvbWFpbiI6ImFwaS1iLmFtb2NybS5ydSJ9.EWF58KvQGEBVICVJ4cFu--0FH7KNaXocvTKIkAN-Zdb07wbfWk1ybNvCT3zOhFSfAsNnh-i8ji9k7mmclN9lUtqK6ouTep-Qmxo0c03OOZfzcxJu7LhJ5DsnxdHdNpQkYc4QKEIsI7I9F-Kv0fXInnM1iA9lqJU3FUcfMhQvsXIYZQBJvjki9xZ86UhV_QksVeCkiZUOwql0kCgJOtyGGK5LsHW3_qh0zBE5YL00422UzM9cpgPh_y4Lw08WGMUygTPtTh-A0G0FICFmtANsFqZfu43PXb3sOwZ8XZ7T2b2rCaShrUh98OwheR0wMFqwD2iAHIWQJ-q8B3X6N0PWvg"

# API endpoints
AMOCRM_API_URL = f"https://{AMOCRM_SUBDOMAIN}.amocrm.ru/api/v4"

class AmoCRMAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å amoCRM API"""
    
    def __init__(self):
        self.headers = {
            'Authorization': f'Bearer {AMOCRM_ACCESS_TOKEN}',
            'Content-Type': 'application/json'
        }
    
    def create_contact(self, name, phone, telegram_id):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ amoCRM"""
        try:
            url = f"{AMOCRM_API_URL}/contacts"
            
            data = {
                "name": name,
                "custom_fields_values": [
                    {
                        "field_code": "PHONE",
                        "values": [
                            {
                                "value": phone,
                                "enum_code": "WORK"
                            }
                        ]
                    }
                ]
            }
            
            response = requests.post(url, headers=self.headers, json=[data])
            
            if response.status_code == 200:
                contact_data = response.json()
                contact_id = contact_data['_embedded']['contacts'][0]['id']
                logger.info(f"–ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω: {contact_id}")
                return contact_id
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            return None
    
    def create_lead(self, name, contact_id, service_type, description=""):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ amoCRM"""
        try:
            url = f"{AMOCRM_API_URL}/leads"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏
            price_map = {
                "–≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è": 3500,
                "–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä": 1500,
                "—Ö–æ–ª–æ–¥–∏–ª—å–Ω–æ–µ": 5000
            }
            
            price = 0
            for key, value in price_map.items():
                if key in service_type.lower():
                    price = value
                    break
            
            data = {
                "name": f"HVAC –∑–∞—è–≤–∫–∞: {name}",
                "price": price,
                "contacts": [
                    {
                        "id": contact_id
                    }
                ],
                "custom_fields_values": [
                    {
                        "field_code": "STATUS_ID",
                        "values": [
                            {
                                "value": "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"
                            }
                        ]
                    }
                ]
            }
            
            if description:
                data["custom_fields_values"].append({
                    "field_code": "COMMENTS",
                    "values": [
                        {
                            "value": f"–¢–∏–ø —É—Å–ª—É–≥–∏: {service_type}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–ò—Å—Ç–æ—á–Ω–∏–∫: Telegram Bot"
                        }
                    ]
                })
            
            response = requests.post(url, headers=self.headers, json=[data])
            
            if response.status_code == 200:
                lead_data = response.json()
                lead_id = lead_data['_embedded']['leads'][0]['id']
                logger.info(f"–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {lead_id}")
                return lead_id
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
            return None
    
    def create_task(self, lead_id, text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º"):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ amoCRM"""
        try:
            url = f"{AMOCRM_API_URL}/tasks"
            
            # –ó–∞–¥–∞—á–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00
            tomorrow = datetime.now().timestamp() + 86400
            
            data = {
                "text": text,
                "complete_till": int(tomorrow),
                "entity_id": lead_id,
                "entity_type": "leads"
            }
            
            response = requests.post(url, headers=self.headers, json=[data])
            
            if response.status_code == 200:
                task_data = response.json()
                task_id = task_data['_embedded']['tasks'][0]['id']
                logger.info(f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_id}")
                return task_id
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è amoCRM API
amocrm = AmoCRMAPI()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    keyboard = [
        [KeyboardButton("üîß AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"), KeyboardButton("üìã –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É")],
        [KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"), KeyboardButton("‚ùì FAQ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    welcome_text = """
üè¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DS EKB!

–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞:
‚Ä¢ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏
‚Ä¢ –†–µ–º–æ–Ω—Ç–µ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤  
‚Ä¢ –•–æ–ª–æ–¥–∏–ª—å–Ω–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏

ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –≤ –º–µ–Ω—é –Ω–∏–∂–µ
    """
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    text = update.message.text
    
    if text == "üîß AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞":
        await update.message.reply_text(
            "üîç AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n\n"
            "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n"
            "‚Ä¢ –í–∞—à–µ –∏–º—è\n"
            "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏\n" 
            "‚Ä¢ –¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è/–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä/—Ö–æ–ª–æ–¥–∏–ª—å–Ω–æ–µ)\n"
            "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\n"
            "+7 922 123-45-67\n"
            "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä\n"
            "–ù–µ –æ—Ö–ª–∞–∂–¥–∞–µ—Ç, —Å—Ç—Ä–∞–Ω–Ω—ã–π –∑–≤—É–∫"
        )
        
    elif text == "üìã –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É":
        await update.message.reply_text(
            "üìã –ó–∞–∫–∞–∑ —É—Å–ª—É–≥–∏\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n"
            "‚Ä¢ –í–∞—à–µ –∏–º—è\n"
            "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏\n"
            "‚Ä¢ –ê–¥—Ä–µ—Å\n" 
            "‚Ä¢ –¢–∏–ø —É—Å–ª—É–≥–∏\n"
            "‚Ä¢ –ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞\n"
            "+7 922 123-45-67\n"
            "—É–ª. –õ–µ–Ω–∏–Ω–∞, 15\n"
            "–ß–∏—Å—Ç–∫–∞ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏\n"
            "–ó–∞–≤—Ç—Ä–∞ –ø–æ—Å–ª–µ 14:00"
        )
        
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text(
            "üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
            "üè¢ –û–û–û ¬´–î–° –ï–ö–ë¬ª\n"
            "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 922 130-83-65\n"
            "üåê –°–∞–π—Ç: ds-ekb.ru\n"
            "üìç –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥\n\n"
            "‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:\n"
            "–ü–Ω-–ü—Ç: 9:00-18:00\n"
            "–°–±: 10:00-16:00\n"
            "–í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π\n\n"
            "üö® –ê–≤–∞—Ä–∏–π–Ω—ã–µ –≤—ã–∑–æ–≤—ã: 24/7"
        )
        
    elif text == "‚ùì FAQ":
        await update.message.reply_text(
            "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
            "üîß –ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ?\n"
            "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏, —Ä–µ–º–æ–Ω—Ç –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤, —Ö–æ–ª–æ–¥–∏–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ\n\n"
            "üí∞ –°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç —É—Å–ª—É–≥–∏?\n"
            "–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è: –æ—Ç 3,500‚ÇΩ\n"
            "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã: –æ—Ç 1,500‚ÇΩ\n"
            "–•–æ–ª–æ–¥–∏–ª—å–Ω–æ–µ: –æ—Ç 5,000‚ÇΩ\n\n"
            "‚è±Ô∏è –ö–∞–∫ –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–µ–¥–µ—Ç–µ?\n"
            "–ü–ª–∞–Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã: –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è\n"
            "–ê–≤–∞—Ä–∏–π–Ω—ã–µ: –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤\n\n"
            "üõ°Ô∏è –î–∞–µ—Ç–µ –ª–∏ –≥–∞—Ä–∞–Ω—Ç–∏—é?\n"
            "–î–∞, –Ω–∞ –≤—Å–µ —Ä–∞–±–æ—Ç—ã 6 –º–µ—Å—è—Ü–µ–≤"
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message_text = update.message.text
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫—É
    lines = message_text.strip().split('\n')
    
    if len(lines) >= 3:  # –ú–∏–Ω–∏–º—É–º –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω, –æ–ø–∏—Å–∞–Ω–∏–µ
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            name = lines[0].strip()
            phone = lines[1].strip()
            service_type = "–û–±—â–∏–π –∑–∞–ø—Ä–æ—Å"
            description = message_text
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å–ª—É–≥–∏
            text_lower = message_text.lower()
            if any(word in text_lower for word in ['–≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è', '–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä', '–≤–æ–∑–¥—É—Ö']):
                service_type = "–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è"
            elif any(word in text_lower for word in ['–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä', '—Å–ø–ª–∏—Ç', '–æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ']):
                service_type = "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä"
            elif any(word in text_lower for word in ['—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫', '–º–æ—Ä–æ–∑–∏–ª—å–Ω–∏–∫', '—Ö–æ–ª–æ–¥–∏–ª—å–Ω–æ–µ']):
                service_type = "–•–æ–ª–æ–¥–∏–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ amoCRM
            contact_id = amocrm.create_contact(name, phone, user.id)
            
            if contact_id:
                # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
                lead_id = amocrm.create_lead(name, contact_id, service_type, description)
                
                if lead_id:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                    amocrm.create_task(lead_id, f"–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫—É: {service_type}")
                    
                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await update.message.reply_text(
                        f"‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
                        f"üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #{lead_id}\n"
                        f"üë§ –ö–ª–∏–µ–Ω—Ç: {name}\n"
                        f"üîß –£—Å–ª—É–≥–∞: {service_type}\n"
                        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
                        f"üïê –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç!\n\n"
                        f"üì± –î–ª—è —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–≤–æ–Ω–∏—Ç–µ: +7 922 130-83-65"
                    )
                    
                    logger.info(f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: Lead ID {lead_id}, Contact ID {contact_id}")
                else:
                    await update.message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º: +7 922 130-83-65"
                    )
            else:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º: +7 922 130-83-65"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º: +7 922 130-83-65"
            )
    else:
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            "ü§ñ –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∑–∞–∫–∞–∑–æ–º —É—Å–ª—É–≥ HVAC!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ –ò–º—è\n"
            "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω\n"
            "‚Ä¢ –¢–∏–ø —É—Å–ª—É–≥–∏\n"
            "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
        )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(
        filters.Regex("^(üîß AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞|üìã –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É|üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã|‚ùì FAQ)$"), 
        handle_buttons
    ))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç DS-EKB –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
