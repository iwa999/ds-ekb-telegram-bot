#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
import asyncio
import json
import requests
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ amoCRM
AMOCRM_SUBDOMAIN = "ekbamodseru"
AMOCRM_BASE_URL = f"https://{AMOCRM_SUBDOMAIN}.amocrm.ru/api/v4"
AMOCRM_TOKEN = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImVjN2RmYjU4ZGNiNTllZWUwM2MwZmNkYTYxMTE3NzQwNGViNTAzNjQ1NGRhYmZmZTAxNzVkYzMzMjBmMzFjMGJjNzRlZGI0ZmM2MTBhOTkwIn0.eyJhdWQiOiJjNDhlMWUwOS04NTVhLTQ3YzItOGQ3Yy0yY2EzM2UxNjhiMWMiLCJqdGkiOiJlYzdkZmI1OGRjYjU5ZWVlMDNjMGZjZGE2MTExNzc0MDRlYjUwMzY0NTRkYWJmZmUwMTc1ZGMzMzIwZjMxYzBiYzc0ZWRiNGZjNjEwYTk5MCIsImlhdCI6MTc1MDI1OTc1MSwibmJmIjoxNzUwMjU5NzUxLCJleHAiOjE4MTMyNzY4MDAsInN1YiI6IjEyNjQwMzA2IiwiZ3JhbnRfdHlwZSI6IiIsImFjY291bnRfaWQiOjMyNDk0NTU4LCJiYXNlX2RvbWFpbiI6ImFtb2NybS5ydSIsInZlcnNpb24iOjIsInNjb3BlcyI6WyJjcm0iLCJmaWxlcyIsImZpbGVzX2RlbGV0ZSIsIm5vdGlmaWNhdGlvbnMiLCJwdXNoX25vdGlmaWNhdGlvbnMiXSwiaGFzaF91dWlkIjoiNDRlMzU2YzktYmRjZS00MTA5LWEwNzktN2Q0OWEyNjk4ZjY4IiwiYXBpX2RvbWFpbiI6ImFwaS1iLmFtb2NybS5ydSJ9.EWF58KvQGEBVICVJ4cFu--0FH7KNaXocvTKIkAN-Zdb07wbfWk1ybNvCT3zOhFSfAsNnh-i8ji9k7mmclN9lUtqK6ouTep-Qmxo0c03OOZfzcxJu7LhJ5DsnxdHdNpQkYc4QKEIsI7I9F-Kv0fXInnM1iA9lqJU3FUcfMhQvsXIYZQBJvjki9xZ86UhV_QksVeCkiZUOwql0kCgJOtyGGK5LsHW3_qh0zBE5YL00422UzM9cpgPh_y4Lw08WGMUygTPtTh-A0G0FICFmtANsFqZfu43PXb3sOwZ8XZ7T2b2rCaShrUh98OwheR0wMFqwD2iAHIWQJ-q8B3X6N0PWvg"

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ amoCRM
HEADERS = {
    'Authorization': f'Bearer {AMOCRM_TOKEN}',
    'Content-Type': 'application/json'
}

def create_amocrm_contact(user_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ amoCRM"""
    try:
        contact_data = {
            "name": user_data.get('name', '–ö–ª–∏–µ–Ω—Ç –∏–∑ Telegram'),
            "custom_fields_values": [
                {
                    "field_code": "PHONE",
                    "values": [{"value": user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}]
                },
                {
                    "field_code": "EMAIL", 
                    "values": [{"value": f"telegram_{user_data.get('user_id', 'unknown')}@telegram.local"}]
                }
            ]
        }
        
        response = requests.post(
            f"{AMOCRM_BASE_URL}/contacts",
            headers=HEADERS,
            json=[contact_data]
        )
        
        if response.status_code == 200:
            contact_id = response.json()['_embedded']['contacts'][0]['id']
            logger.info(f"–ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω: {contact_id}")
            return contact_id
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {response.text}")
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
        return None

def create_amocrm_deal(user_data, contact_id=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ amoCRM"""
    try:
        deal_name = f"–ó–∞—è–≤–∫–∞ –æ—Ç {user_data.get('name', 'Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')} - {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        deal_data = {
            "name": deal_name,
            "price": 5000,  # –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
            "pipeline_id": 1,  # ID –≤–æ—Ä–æ–Ω–∫–∏ (–æ–±—ã—á–Ω–æ 1 –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π)
            "status_id": 1,    # ID —ç—Ç–∞–ø–∞ "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∫ —Å–¥–µ–ª–∫–µ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if contact_id:
            deal_data["_embedded"] = {
                "contacts": [{"id": contact_id}]
            }
        
        response = requests.post(
            f"{AMOCRM_BASE_URL}/leads",
            headers=HEADERS,
            json=[deal_data]
        )
        
        if response.status_code == 200:
            deal_id = response.json()['_embedded']['leads'][0]['id']
            logger.info(f"–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {deal_id}")
            return deal_id
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏: {response.text}")
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
        return None

def create_amocrm_task(deal_id, user_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ amoCRM"""
    try:
        task_text = f"–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫—É –∏–∑ Telegram:\n\n"
        task_text += f"–ö–ª–∏–µ–Ω—Ç: {user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        task_text += f"Username: @{user_data.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        task_text += f"–°–æ–æ–±—â–µ–Ω–∏–µ: {user_data.get('message', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        task_text += f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        task_data = {
            "text": task_text,
            "complete_till": int((datetime.now().timestamp() + 86400)),  # +24 —á–∞—Å–∞
            "entity_id": deal_id,
            "entity_type": "leads"
        }
        
        response = requests.post(
            f"{AMOCRM_BASE_URL}/tasks",
            headers=HEADERS,
            json=[task_data]
        )
        
        if response.status_code == 200:
            task_id = response.json()['_embedded']['tasks'][0]['id']
            logger.info(f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_id}")
            return task_id
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {response.text}")
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [KeyboardButton("üîß AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"), KeyboardButton("üìã –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É")],
        [KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"), KeyboardButton("‚ùì FAQ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    welcome_text = """üè¢ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DS EKB!

–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞:
‚Ä¢ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏ 
‚Ä¢ –†–µ–º–æ–Ω—Ç–µ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤
‚Ä¢ –•–æ–ª–æ–¥–∏–ª—å–Ω–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏

ü§ñ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É - —è —Å–æ–∑–¥–∞–º –∑–∞—è–≤–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!

–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:"""
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    message_text = update.message.text
    
    if message_text == "üîß AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞":
        await update.message.reply_text(
            "üîß AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n\n"
            "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –≤–∞—à–∏–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º:\n"
            "‚Ä¢ –ß—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã?\n"
            "‚Ä¢ –ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å –ø—Ä–æ–±–ª–µ–º–∞?\n\n"
            "–Ø —Å–æ–∑–¥–∞–º –∑–∞—è–≤–∫—É –∏ –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!"
        )
    
    elif message_text == "üìã –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É":
        await update.message.reply_text(
            "üìã –ó–∞–∫–∞–∑ —É—Å–ª—É–≥–∏\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:\n"
            "‚Ä¢ –¢–∏–ø —É—Å–ª—É–≥–∏\n"
            "‚Ä¢ –ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞\n"
            "‚Ä¢ –ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è\n"
            "‚Ä¢ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã\n\n"
            "–Ø –æ—Ñ–æ—Ä–º–ª—é –∑–∞—è–≤–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
        )
    
    elif message_text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await update.message.reply_text(
            "üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
            "‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: +7 922 130-83-65\n"
            "üìß Email: info@ds-ekb.ru\n"
            "üåê –°–∞–π—Ç: ds-ekb.ru\n"
            "üìç –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥\n\n"
            "‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 24/7"
        )
    
    elif message_text == "‚ùì FAQ":
        await update.message.reply_text(
            "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
            "üîß –ö–∞–∫ —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ —á–∏—Å—Ç–∏—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—é?\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º 1-2 —Ä–∞–∑–∞ –≤ –≥–æ–¥\n\n"
            "‚ùÑÔ∏è –ö–æ–≥–¥–∞ –∑–∞–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä?\n"
            "–ü—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ö–æ–ª–æ–¥–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n"
            "üè¢ –†–∞–±–æ—Ç–∞–µ—Ç–µ —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏?\n"
            "–î–∞, –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º –ª—é–±—ã–µ –æ–±—ä–µ–∫—Ç—ã\n\n"
            "üí∞ –°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç —É—Å–ª—É–≥–∏?\n"
            "–û—Ç 1500‚ÇΩ, —Ç–æ—á–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
        )

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –∑–∞—è–≤–∫–∏"""
    user = update.effective_user
    message_text = update.message.text
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        'user_id': user.id,
        'name': user.full_name or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}",
        'username': user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω",
        'message': message_text,
        'phone': "–ë—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏"
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏
    await update.message.reply_text(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
        f"üìù –¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏: {message_text}\n\n"
        "üîÑ –°–æ–∑–¥–∞—é —Å–¥–µ–ª–∫—É –≤ —Å–∏—Å—Ç–µ–º–µ..."
    )
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ amoCRM
        contact_id = create_amocrm_contact(user_data)
        
        # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É –≤ amoCRM
        deal_id = create_amocrm_deal(user_data, contact_id)
        
        if deal_id:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
            task_id = create_amocrm_task(deal_id, user_data)
            
            success_message = (
                "üéâ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"üìã –ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏: {deal_id}\n"
                "üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! ü§ù"
            )
        else:
            success_message = (
                "‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞.\n"
                "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –µ—ë –≤—Ä—É—á–Ω—É—é.\n\n"
                "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 922 130-83-65"
            )
        
        await update.message.reply_text(success_message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é:\n"
            "üìû +7 922 130-83-65"
        )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.environ.get('TELEGRAM_TOKEN')
    if not token:
        logger.error("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    application.add_handler(MessageHandler(
        filters.Regex("^(üîß AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞|üìã –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É|üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã|‚ùì FAQ)$"), 
        handle_buttons
    ))
    
    # –í–ê–ñ–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –õ–Æ–ë–û–ì–û —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –∑–∞—è–≤–∫–∏
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & ~filters.Regex("^(üîß AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞|üìã –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É|üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã|‚ùì FAQ)$"), 
        handle_text_message
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
