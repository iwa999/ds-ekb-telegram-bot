 #!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DS EKB Telegram Bot —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π amoCRM
–ï–¥–∏–Ω—ã–π —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
"""

import os
import json
import logging
import asyncio
import aiohttp
from datetime import datetime
from typing import Optional, Dict, Any

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes
)

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞"""
    
    # Telegram
    TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', '7437623986:AAFj-sItRC4s889Sop2mglRE7SE2c-drTCY')
    
    # amoCRM
    AMOCRM_SUBDOMAIN = 'ekbamodseru'
    AMOCRM_CLIENT_ID = os.getenv('AMOCRM_CLIENT_ID')
    AMOCRM_CLIENT_SECRET = os.getenv('AMOCRM_CLIENT_SECRET')
    AMOCRM_LONG_TOKEN = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImI4YWFlMGU1ODA2Nzc1MDAzMjFmMjlhNDYyODI1ZTQ3NjY3MDNkOThjOGE2NDQ1YTNhNTg1M2Y5NDg3YWJjMzU4MGIyNDhmMTAzZjdkZmFmIn0.eyJhdWQiOiJjNDhlMWUwOS04NTVhLTQ3YzItOGQ3Yy0yY2EzM2UxNjhiMWMiLCJqdGkiOiJiOGFhZTBlNTgwNjc3NTAwMzIxZjI5YTQ2MjgyNWU0NzY2NzAzZDk4YzhhNjQ0NWEzYTU4NTNmOTQ4N2FiYzM1ODBiMjQ4ZjEwM2Y3ZGZhZiIsImlhdCI6MTc1MDI2MzQyNSwibmJmIjoxNzUwMjYzNDI1LCJleHAiOjE4NDIzMDcyMDAsInN1YiI6IjEyNjQwMzA2IiwiZ3JhbnRfdHlwZSI6IiIsImFjY291bnRfaWQiOjMyNDk0NTU4LCJiYXNlX2RvbWFpbiI6ImFtb2NybS5ydSIsInZlcnNpb24iOjIsInNjb3BlcyI6WyJjcm0iLCJmaWxlcyIsImZpbGVzX2RlbGV0ZSIsIm5vdGlmaWNhdGlvbnMiLCJwdXNoX25vdGlmaWNhdGlvbnMiXSwiaGFzaF91dWlkIjoiMDBiZDI4ZTMtYTllZS00ZmFiLWI5N2MtYjk0OTdiMDY2MzY4IiwiYXBpX2RvbWFpbiI6ImFwaS1iLmFtb2NybS5ydSJ9.HvgSDyxs_Lw0opRU7XW95zv1L65Mz-F0XAXdUl_Xwddx6pqP2OXUPXAK-Gr-k85-8nZUV0rtp9fkXHpVh6GpJrKgrnhNCWkv5YHBx29TJj8G-mQEomfrHFv-uzMQt6DY4cktWPAytRqXdloYbv4c_hkMElbqt5M8-fY3GAJY3xLrqzpDtclUh-Hcfyun6-st23-hHdJDWAWCrZxLYK7LcHICZ9XG8EXrx-rNVW_OSRponiYacNAVDW30n-F5hgOdnhrfxAKa-ies35ZakaAHLWtezFl-DP4d0mIQWEVJfeuBAA2LsQng-ct1jbzCnhEGISR4RVviTLufiQrBR9Qp2Q'
    
    @property
    def amocrm_api_url(self) -> str:
        return f'https://{self.AMOCRM_SUBDOMAIN}.amocrm.ru/api/v4'

# ===== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï =====
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== AMOCRM –ö–õ–ê–°–° =====
class AmoCRMClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å amoCRM API"""
    
    def __init__(self):
        self.config = Config()
        self.session: Optional[aiohttp.ClientSession] = None
    
    async def _get_session(self) -> aiohttp.ClientSession:
        """–ü–æ–ª—É—á–∏—Ç—å HTTP —Å–µ—Å—Å–∏—é"""
        if self.session is None or self.session.closed:
            self.session = aiohttp.ClientSession()
        return self.session
    
    async def _make_request(self, method: str, endpoint: str, data: Optional[Dict] = None) -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API amoCRM"""
        try:
            session = await self._get_session()
            url = f"{self.config.amocrm_api_url}/{endpoint}"
            
            headers = {
                'Authorization': f'Bearer {self.config.AMOCRM_LONG_TOKEN}',
                'Content-Type': 'application/json'
            }
            
            async with session.request(method, url, headers=headers, json=data) as response:
                if response.status == 200 or response.status == 201:
                    result = await response.json()
                    logger.info(f"amoCRM API —É—Å–ø–µ—à–Ω–æ: {method} {endpoint}")
                    return result
                else:
                    error_text = await response.text()
                    logger.error(f"amoCRM API –æ—à–∏–±–∫–∞ {response.status}: {error_text}")
                    return None
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ amoCRM: {e}")
            return None
    
    async def create_contact(self, name: str, phone: str, telegram_id: str) -> Optional[int]:
        """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –≤ amoCRM"""
        try:
            contact_data = {
                "name": name or f"–ö–ª–∏–µ–Ω—Ç {telegram_id}",
                "custom_fields_values": [
                    {
                        "field_id": 33950,  # ID –ø–æ–ª—è –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                        "values": [{"value": phone, "enum_code": "WORK"}]
                    },
                    {
                        "field_id": 33952,  # ID –ø–æ–ª—è –¥–ª—è Telegram
                        "values": [{"value": f"@{telegram_id}"}]
                    }
                ]
            }
            
            result = await self._make_request('POST', 'contacts', [contact_data])
            if result and '_embedded' in result and 'contacts' in result['_embedded']:
                contact_id = result['_embedded']['contacts'][0]['id']
                logger.info(f"–ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω: ID {contact_id}")
                return contact_id
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            return None
    
    async def create_lead(self, contact_id: int, message_text: str, telegram_user: str) -> Optional[int]:
        """–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É –≤ amoCRM"""
        try:
            lead_data = {
                "name": f"HVAC –∑–∞—è–≤–∫–∞ –æ—Ç {telegram_user}",
                "price": 5000,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
                "pipeline_id": 8847802,  # ID –≤–æ—Ä–æ–Ω–∫–∏ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è)
                "status_id": 65837170,   # ID —Å—Ç–∞—Ç—É—Å–∞ "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"
                "custom_fields_values": [
                    {
                        "field_id": 1579051,  # ID –ø–æ–ª—è –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
                        "values": [{"value": message_text[:500]}]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                    }
                ],
                "_embedded": {
                    "contacts": [{"id": contact_id}]
                }
            }
            
            result = await self._make_request('POST', 'leads', [lead_data])
            if result and '_embedded' in result and 'leads' in result['_embedded']:
                lead_id = result['_embedded']['leads'][0]['id']
                logger.info(f"–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID {lead_id}")
                return lead_id
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
            return None
    
    async def create_task(self, lead_id: int, telegram_user: str) -> bool:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ amoCRM"""
        try:
            task_data = {
                "text": f"–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º {telegram_user} –ø–æ –∑–∞—è–≤–∫–µ HVAC",
                "complete_till": int((datetime.now().timestamp() + 3600) * 1000),  # –ß–µ—Ä–µ–∑ —á–∞—Å
                "entity_id": lead_id,
                "entity_type": "leads",
                "task_type_id": 1  # –ó–≤–æ–Ω–æ–∫
            }
            
            result = await self._make_request('POST', 'tasks', [task_data])
            if result:
                logger.info(f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ {lead_id}")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
            return False
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é"""
        if self.session and not self.session.closed:
            await self.session.close()

# ===== TELEGRAM BOT –ö–õ–ê–°–° =====
class DSEKBBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ DS EKB"""
    
    def __init__(self):
        self.config = Config()
        self.amocrm = AmoCRMClient()
        self.application: Optional[Application] = None
    
    def get_main_keyboard(self) -> ReplyKeyboardMarkup:
        """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–æ—Ç–∞"""
        keyboard = [
            [KeyboardButton("üîß AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"), KeyboardButton("üìã –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É")],
            [KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"), KeyboardButton("‚ùì FAQ")]
        ]
        return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        try:
            welcome_text = """
üè¢ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DS EKB!*

–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞:
üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏
‚ùÑÔ∏è –†–µ–º–æ–Ω—Ç–µ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤
üßä –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è

*–° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞!*

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:
            """
            
            await update.message.reply_text(
                welcome_text,
                parse_mode='Markdown',
                reply_markup=self.get_main_keyboard()
            )
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.username} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def handle_ai_diagnostics(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            response_text = """
ü§ñ *AI-–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ DS EKB*

–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –≤–∞—à–∏–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º:
‚Ä¢ –ö–∞–∫–æ–π —Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è? (–≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è/–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä/—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫)
‚Ä¢ –ö–∞–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã –Ω–∞–±–ª—é–¥–∞–µ—Ç–µ?
‚Ä¢ –ö–æ–≥–¥–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ—è–≤–∏–ª–∞—Å—å?

–ù–∞—à –ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –¥–∞—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!
            """
            
            await update.message.reply_text(
                response_text,
                parse_mode='Markdown',
                reply_markup=self.get_main_keyboard()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_ai_diagnostics: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def handle_order_service(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥–∏"""
        try:
            response_text = """
üìã *–ó–∞–∫–∞–∑ —É—Å–ª—É–≥–∏ DS EKB*

–î–ª—è –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥–∏ —É–∫–∞–∂–∏—Ç–µ:
‚Ä¢ –í–∞—à–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω
‚Ä¢ –ê–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞
‚Ä¢ –¢–∏–ø —É—Å–ª—É–≥–∏ (–≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è/–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä/—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫)
‚Ä¢ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–∏–∑–∏—Ç–∞

–ü—Ä–∏–º–µ—Ä: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, +7 922 123-45-67, —É–ª. –õ–µ–Ω–∏–Ω–∞ 10, —Ä–µ–º–æ–Ω—Ç –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞, –∑–∞–≤—Ç—Ä–∞ –ø–æ—Å–ª–µ 14:00"
            """
            
            await update.message.reply_text(
                response_text,
                parse_mode='Markdown',
                reply_markup=self.get_main_keyboard()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_order_service: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def handle_contacts(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        try:
            contacts_text = """
üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã DS EKB*

üè¢ *–û–û–û "–î–° –ï–ö–ë"*
üìç –≥. –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥
üì± +7 922 130-83-65
üåê ds-ekb.ru

‚è∞ *–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:*
–ü–Ω-–ü—Ç: 9:00 - 18:00
–°–±: 10:00 - 16:00
–í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π

üö® *–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã 24/7*
            """
            
            await update.message.reply_text(
                contacts_text,
                parse_mode='Markdown',
                reply_markup=self.get_main_keyboard()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_contacts: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def handle_faq(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ FAQ"""
        try:
            faq_text = """
‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*

*Q: –ö–∞–∫ —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ —á–∏—Å—Ç–∏—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—é?*
A: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 6-12 –º–µ—Å—è—Ü–µ–≤

*Q: –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞?*
A: AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –≤—ã–µ–∑–¥ –º–∞—Å—Ç–µ—Ä–∞ –æ—Ç 1500‚ÇΩ

*Q: –†–∞–±–æ—Ç–∞–µ—Ç–µ –ª–∏ —Å –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º?*
A: –î–∞, –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º –ª—é–±—ã–µ —Ç–∏–ø—ã HVAC —Å–∏—Å—Ç–µ–º

*Q: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –ª–∏ –≥–∞—Ä–∞–Ω—Ç–∏—é?*
A: –î–∞, –≥–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –≤—Å–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç –æ—Ç 6 –º–µ—Å—è—Ü–µ–≤
            """
            
            await update.message.reply_text(
                faq_text,
                parse_mode='Markdown',
                reply_markup=self.get_main_keyboard()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_faq: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è FAQ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def extract_contact_info(self, text: str) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ—á—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        import re
        
        info = {
            'name': '',
            'phone': '',
            'address': '',
            'service': '',
            'time': ''
        }
        
        # –ü–æ–∏—Å–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_pattern = r'(\+?7[\s\-]?\(?9\d{2}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2})'
        phone_match = re.search(phone_pattern, text)
        if phone_match:
            info['phone'] = phone_match.group(1)
        
        # –ü–æ–∏—Å–∫ –∏–º–µ–Ω–∏ (–ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –≤ –Ω–∞—á–∞–ª–µ)
        words = text.split()
        if words:
            info['name'] = words[0]
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏
        services = ['–≤–µ–Ω—Ç–∏–ª—è—Ü', '–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä', '—Ö–æ–ª–æ–¥–∏–ª—å–Ω', '—á–∏—Å—Ç–∫–∞', '—Ä–µ–º–æ–Ω—Ç', '–æ–±—Å–ª—É–∂–∏–≤']
        for service in services:
            if service in text.lower():
                info['service'] = service
                break
        
        return info
    
    async def process_request(self, user_data: Dict, message_text: str, telegram_user: str) -> Optional[int]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ amoCRM"""
        try:
            # –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
            contact_id = await self.amocrm.create_contact(
                name=user_data.get('name', ''),
                phone=user_data.get('phone', ''),
                telegram_id=telegram_user
            )
            
            if not contact_id:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
                return None
            
            # –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É
            lead_id = await self.amocrm.create_lead(
                contact_id=contact_id,
                message_text=message_text,
                telegram_user=telegram_user
            )
            
            if not lead_id:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")
                return None
            
            # –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
            await self.amocrm.create_task(lead_id, telegram_user)
            
            return lead_id
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
            return None
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            message_text = update.message.text
            user = update.effective_user
            telegram_user = user.username or f"id{user.id}"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –∫–Ω–æ–ø–æ–∫
            if message_text in ["üîß AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"]:
                await self.handle_ai_diagnostics(update, context)
                return
            elif message_text in ["üìã –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É"]:
                await self.handle_order_service(update, context)
                return
            elif message_text in ["üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"]:
                await self.handle_contacts(update, context)
                return
            elif message_text in ["‚ùì FAQ"]:
                await self.handle_faq(update, context)
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ –∑–∞—è–≤–∫–∏
            await update.message.reply_text(
                "‚è≥ –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤–∞—à—É –∑–∞—è–≤–∫—É... –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É –≤ —Å–∏—Å—Ç–µ–º–µ...",
                reply_markup=self.get_main_keyboard()
            )
            
            # –ò–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
            contact_info = self.extract_contact_info(message_text)
            
            # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ amoCRM
            lead_id = await self.process_request(contact_info, message_text, telegram_user)
            
            if lead_id:
                success_text = f"""
‚úÖ *–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!*

üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #{lead_id}
üë§ –ö–ª–∏–µ–Ω—Ç: {contact_info.get('name', telegram_user)}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {contact_info.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}

üîÑ *–°—Ç–∞—Ç—É—Å:* –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞
‚è∞ *–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:* –¥–æ 1 —á–∞—Å–∞

–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!
                """
                
                await update.message.reply_text(
                    success_text,
                    parse_mode='Markdown',
                    reply_markup=self.get_main_keyboard()
                )
                
                logger.info(f"–ó–∞—è–≤–∫–∞ {lead_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {telegram_user}")
                
            else:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π. –ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –µ—ë –≤—Ä—É—á–Ω—É—é –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!",
                    reply_markup=self.get_main_keyboard()
                )
                
                logger.warning(f"–ó–∞—è–≤–∫–∞ –æ—Ç {telegram_user} –ø—Ä–∏–Ω—è—Ç–∞, –Ω–æ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –≤ amoCRM")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º: +7 922 130-83-65",
                reply_markup=self.get_main_keyboard()
            )
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {context.error}")
        
        if update and update.message:
            try:
                await update.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º!",
                    reply_markup=self.get_main_keyboard()
                )
            except Exception:
                pass
    
    async def setup_application(self) -> Application:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(self.config.TELEGRAM_TOKEN).build()
        
        # –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
        
        # –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(self.error_handler)
        
        return application
    
    async def start_bot(self) -> None:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ DS EKB –±–æ—Ç–∞...")
            
            # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = await self.setup_application()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
            await self.application.initialize()
            
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å polling
            await self.application.start()
            await self.application.updater.start_polling(drop_pending_updates=True)
            
            logger.info("DS EKB –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            
            # –î–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            await asyncio.Future()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        finally:
            await self.cleanup()
    
    async def cleanup(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.amocrm:
                await self.amocrm.close()
            
            if self.application:
                await self.application.stop()
                await self.application.shutdown()
                
            logger.info("–†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")

# ===== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =====
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    bot = DSEKBBot()
    await bot.start_bot()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
