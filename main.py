#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DS EKB Telegram Bot —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π amoCRM
–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
"""

import asyncio
import logging
import os
import json
import requests
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', '7437623986:AAFj-sItRC4s889Sop2mglRE7SE2c-drTCY')

# amoCRM Configuration
AMOCRM_SUBDOMAIN = "ekbamodseru"
AMOCRM_API_URL = f"https://{AMOCRM_SUBDOMAIN}.amocrm.ru/api/v4/"

# –ù–û–í–´–ô –î–û–õ–ì–û–°–†–û–ß–ù–´–ô –¢–û–ö–ï–ù - –û–ë–ù–û–í–õ–ï–ù!
AMOCRM_TOKEN = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImI4YWFlMGU1ODA2Nzc1MDAzMjFmMjlhNDYyODI1ZTQ3NjY3MDNkOThjOGE2NDQ1YTNhNTg1M2Y5NDg3YWJjMzU4MGIyNDhmMTAzZjdkZmFmIn0.eyJhdWQiOiJjNDhlMWUwOS04NTVhLTQ3YzItOGQ3Yy0yY2EzM2UxNjhiMWMiLCJqdGkiOiJiOGFhZTBlNTgwNjc3NTAwMzIxZjI5YTQ2MjgyNWU0NzY2NzAzZDk4YzhhNjQ0NWEzYTU4NTNmOTQ4N2FiYzM1ODBiMjQ4ZjEwM2Y3ZGZhZiIsImlhdCI6MTc1MDI2MzQyNSwibmJmIjoxNzUwMjYzNDI1LCJleHAiOjE4NDIzMDcyMDAsInN1YiI6IjEyNjQwMzA2IiwiZ3JhbnRfdHlwZSI6IiIsImFjY291bnRfaWQiOjMyNDk0NTU4LCJiYXNlX2RvbWFpbiI6ImFtb2NybS5ydSIsInZlcnNpb24iOjIsInNjb3BlcyI6WyJjcm0iLCJmaWxlcyIsImZpbGVzX2RlbGV0ZSIsIm5vdGlmaWNhdGlvbnMiLCJwdXNoX25vdGlmaWNhdGlvbnMiXSwiaGFzaF91dWlkIjoiMDBiZDI4ZTMtYTllZS00ZmFiLWI5N2MtYjk0OTdiMDY2MzY4IiwiYXBpX2RvbWFpbiI6ImFwaS1iLmFtb2NybS5ydSJ9.HvgSDyxs_Lw0opRU7XW95zv1L65Mz-F0XAXdUl_Xwddx6pqP2OXUPXAK-Gr-k85-8nZUV0rtp9fkXHpVh6GpJrKgrnhNCWkv5YHBx29TJj8G-mQEomfrHFv-uzMQt6DY4cktWPAytRqXdloYbv4c_hkMElbqt5M8-fY3GAJY3xLrqzpDtclUh-Hcfyun6-st23-hHdJDWAWCrZxLYK7LcHICZ9XG8EXrx-rNVW_OSRponiYacNAVDW30n-F5hgOdnhrfxAKa-ies35ZakaAHLWtezFl-DP4d0mIQWEVJfeuBAA2LsQng-ct1jbzCnhEGISR4RVviTLufiQrBR9Qp2Q"

async def create_amocrm_contact(name: str, phone: str = None, telegram_id: str = None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ amoCRM"""
    try:
        headers = {
            'Authorization': f'Bearer {AMOCRM_TOKEN}',
            'Content-Type': 'application/json'
        }
        
        contact_data = {
            "name": name,
            "custom_fields_values": []
        }
        
        if phone:
            contact_data["custom_fields_values"].append({
                "field_id": 269005,  # ID –ø–æ–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                "values": [{"value": phone}]
            })
            
        if telegram_id:
            contact_data["custom_fields_values"].append({
                "field_id": 269007,  # ID –ø–æ–ª—è Telegram
                "values": [{"value": f"@{telegram_id}"}]
            })
        
        response = requests.post(
            f"{AMOCRM_API_URL}contacts",
            headers=headers,
            json=[contact_data]
        )
        
        logger.info(f"Contact creation response: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            if result.get('_embedded', {}).get('contacts'):
                contact_id = result['_embedded']['contacts'][0]['id']
                logger.info(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω: ID {contact_id}")
                return contact_id
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {response.text}")
            
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
    
    return None

async def create_amocrm_lead(contact_id: int, message_text: str, user_data: dict):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ amoCRM"""
    try:
        headers = {
            'Authorization': f'Bearer {AMOCRM_TOKEN}',
            'Content-Type': 'application/json'
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å–ª—É–≥–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
        service_type = "–û–±—â–∞—è –∑–∞—è–≤–∫–∞"
        if any(word in message_text.lower() for word in ['–≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è', '–≤–æ–∑–¥—É—Ö', '–¥—ã–º']):
            service_type = "–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è"
        elif any(word in message_text.lower() for word in ['–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä', '—Å–ø–ª–∏—Ç', '–æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ']):
            service_type = "–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä"
        elif any(word in message_text.lower() for word in ['—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫', '–º–æ—Ä–æ–∑–∏–ª—å–Ω–∏–∫', '—Ñ—Ä–µ–æ–Ω']):
            service_type = "–•–æ–ª–æ–¥–∏–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
        
        lead_data = {
            "name": f"HVAC –∑–∞—è–≤–∫–∞ - {service_type}",
            "price": 5000,  # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
            "contacts_to_bind": [contact_id],
            "custom_fields_values": [
                {
                    "field_id": 123456,  # ID –ø–æ–ª—è —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏
                    "values": [{"value": service_type}]
                },
                {
                    "field_id": 123457,  # ID –ø–æ–ª—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                    "values": [{"value": message_text[:500]}]
                }
            ]
        }
        
        response = requests.post(
            f"{AMOCRM_API_URL}leads",
            headers=headers,
            json=[lead_data]
        )
        
        logger.info(f"Lead creation response: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            if result.get('_embedded', {}).get('leads'):
                lead_id = result['_embedded']['leads'][0]['id']
                logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID {lead_id}")
                return lead_id
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏: {response.text}")
            
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
    
    return None

async def create_amocrm_task(lead_id: int, contact_name: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ amoCRM"""
    try:
        headers = {
            'Authorization': f'Bearer {AMOCRM_TOKEN}',
            'Content-Type': 'application/json'
        }
        
        task_data = {
            "text": f"–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º {contact_name} –ø–æ –∑–∞—è–≤–∫–µ HVAC",
            "complete_till": int((datetime.now().timestamp() + 3600) * 1000),  # +1 —á–∞—Å
            "entity_id": lead_id,
            "entity_type": "leads"
        }
        
        response = requests.post(
            f"{AMOCRM_API_URL}tasks",
            headers=headers,
            json=[task_data]
        )
        
        logger.info(f"Task creation response: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            if result.get('_embedded', {}).get('tasks'):
                task_id = result['_embedded']['tasks'][0]['id']
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: ID {task_id}")
                return task_id
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {response.text}")
            
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
    
    return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("üîß AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data='ai_diagnostics')],
        [InlineKeyboardButton("üìã –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É", callback_data='order_service')],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')],
        [InlineKeyboardButton("‚ùì FAQ", callback_data='faq')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = """
üîß *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DS EKB!*

–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:
‚Ä¢ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏
‚Ä¢ –†–µ–º–æ–Ω—Ç –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–≤  
‚Ä¢ –•–æ–ª–æ–¥–∏–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.
    """
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üîß AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data='ai_diagnostics')],
        [InlineKeyboardButton("üìã –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É", callback_data='order_service')],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')],
        [InlineKeyboardButton("‚ùì FAQ", callback_data='faq')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if query.data == 'ai_diagnostics':
        text = """
ü§ñ *AI-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è*

–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –≤–∞—à–∏–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º:
‚Ä¢ –ö–∞–∫–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ?
‚Ä¢ –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?
‚Ä¢ –ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å –ø—Ä–æ–±–ª–µ–º–∞?

–ù–∞—à –ò–ò –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Ä–µ—à–µ–Ω–∏–µ!
        """
    elif query.data == 'order_service':
        text = """
üìã *–ó–∞–∫–∞–∑ —É—Å–ª—É–≥–∏*

–î–ª—è –∑–∞–∫–∞–∑–∞ —É–∫–∞–∂–∏—Ç–µ:
‚Ä¢ –¢–∏–ø —É—Å–ª—É–≥–∏
‚Ä¢ –ê–¥—Ä–µ—Å
‚Ä¢ –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω

–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞!
        """
    elif query.data == 'contacts':
        text = """
üìû *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*

üè¢ –û–û–û "–î–° –ï–ö–ë"
üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 922 130-83-65
üåê –°–∞–π—Ç: ds-ekb.ru
üìç –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥

‚è∞ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 
–ü–Ω-–ü—Ç: 8:00-20:00
–°–±-–í—Å: 9:00-18:00

üö® –ê–≤–∞—Ä–∏–π–Ω–∞—è —Å–ª—É–∂–±–∞: 24/7
        """
    elif query.data == 'faq':
        text = """
‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*

üî∏ –ö–∞–∫ –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–µ–¥–µ—Ç–µ?
   –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–µ–∑–¥ - –≤ —Ç–µ—á–µ–Ω–∏–µ 4 —á–∞—Å–æ–≤
   –°—Ä–æ—á–Ω—ã–π –≤—ã–∑–æ–≤ - –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞

üî∏ –ö–∞–∫–æ–≤–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏?
   –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ —Ä–µ–º–æ–Ω—Ç–∞
   –û—Ç–¥–µ–ª—å–Ω–æ - 1000‚ÇΩ

üî∏ –î–∞–µ—Ç–µ –ª–∏ –≥–∞—Ä–∞–Ω—Ç–∏—é?
   –î–∞, –Ω–∞ –≤—Å–µ —Ä–∞–±–æ—Ç—ã - 1 –≥–æ–¥
   –ù–∞ –∑–∞–ø—á–∞—Å—Ç–∏ - —Å–æ–≥–ª–∞—Å–Ω–æ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è

üî∏ –†–∞–±–æ—Ç–∞–µ—Ç–µ –ª–∏ —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏ –ª–∏—Ü–∞–º–∏?
   –î–∞, —Ä–∞–±–æ—Ç–∞–µ–º —Å –ù–î–° –∏ –±–µ–∑ –ù–î–°
        """
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞—è–≤–æ–∫)"""
    user = update.effective_user
    message_text = update.message.text
    
    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –æ—Ç {user.username}: {message_text}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    name = user.first_name or "–ö–ª–∏–µ–Ω—Ç"
    if user.last_name:
        name += f" {user.last_name}"
    
    phone = None
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    import re
    phone_match = re.search(r'(\+7|8)?[\s\-]?\(?(\d{3})\)?[\s\-]?(\d{3})[\s\-]?(\d{2})[\s\-]?(\d{2})', message_text)
    if phone_match:
        phone = phone_match.group(0)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ amoCRM
        contact_id = await create_amocrm_contact(
            name=name,
            phone=phone,
            telegram_id=user.username
        )
        
        if contact_id:
            # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É
            lead_id = await create_amocrm_lead(
                contact_id=contact_id,
                message_text=message_text,
                user_data={
                    'telegram_id': user.id,
                    'username': user.username,
                    'name': name
                }
            )
            
            if lead_id:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                task_id = await create_amocrm_task(lead_id, name)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                success_text = f"""
‚úÖ *–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!*

üìù –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #{lead_id}
üë§ –ö–ª–∏–µ–Ω—Ç: {name}
üì± –ö–æ–Ω—Ç–∞–∫—Ç: {phone or 'Telegram: @' + (user.username or str(user.id))}

üìã –í–∞—à–∞ –∑–∞—è–≤–∫–∞:
"{message_text}"

‚è∞ –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞!

–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ DS EKB! üîß
                """
                
                keyboard = [
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    success_text,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
                
                logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: Contact ID {contact_id}, Lead ID {lead_id}")
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_text = """
‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é:
üìû +7 922 130-83-65

–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!
        """
        
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            error_text,
            reply_markup=reply_markup
        )

def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ DS EKB Telegram Bot...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
