"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã
"""

import logging
import re
from typing import Dict, Optional
from telegram import Update
from config import Config

def setup_logging() -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    config = Config()
    
    logging.basicConfig(
        level=getattr(logging, config.LOG_LEVEL),
        format=config.LOG_FORMAT,
        handlers=[
            logging.StreamHandler(),
        ]
    )
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("telegram").setLevel(logging.WARNING)
    logging.getLogger("aiohttp").setLevel(logging.WARNING)

def extract_user_data(update: Update) -> Dict:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user = update.effective_user
    message = update.message
    
    # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_data = {
        'user_id': user.id,
        'username': user.username,
        'first_name': user.first_name,
        'last_name': user.last_name,
        'message': message.text or message.caption or "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞",
        'telegram': f"@{user.username}" if user.username else f"ID: {user.id}",
        'name': "",
        'phone': "",
        'email': ""
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
    name_parts = []
    if user.first_name:
        name_parts.append(user.first_name)
    if user.last_name:
        name_parts.append(user.last_name)
    user_data['name'] = " ".join(name_parts) or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if phone := extract_phone(message.text or ""):
        user_data['phone'] = phone
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if email := extract_email(message.text or ""):
        user_data['email'] = email
    
    return user_data

def extract_phone(text: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    if not text:
        return None
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    phone_patterns = [
        r'\+7[\s\-\(\)]?(\d{3})[\s\-\(\)]?(\d{3})[\s\-\(\)]?(\d{2})[\s\-\(\)]?(\d{2})',
        r'8[\s\-\(\)]?(\d{3})[\s\-\(\)]?(\d{3})[\s\-\(\)]?(\d{2})[\s\-\(\)]?(\d{2})',
        r'7[\s\-\(\)]?(\d{3})[\s\-\(\)]?(\d{3})[\s\-\(\)]?(\d{2})[\s\-\(\)]?(\d{2})',
        r'(\d{3})[\s\-\(\)]?(\d{3})[\s\-\(\)]?(\d{2})[\s\-\(\)]?(\d{2})'
    ]
    
    for pattern in phone_patterns:
        match = re.search(pattern, text)
        if match:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä
            digits = ''.join(match.groups())
            if len(digits) == 10:
                return f"+7{digits}"
            elif len(digits) == 11 and digits.startswith('7'):
                return f"+{digits}"
    
    return None

def extract_email(text: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ email –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    if not text:
        return None
    
    email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    match = re.search(email_pattern, text)
    
    return match.group() if match else None

def format_message(template: str, **kwargs) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    try:
        return template.format(**kwargs)
    except KeyError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {e}")
        return template

def clean_text(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if not text:
        return ""
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    text = re.sub(r'\s+', ' ', text)
    text = text.strip()
    
    # –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'[<>"\'\x00-\x1f\x7f-\x9f]', '', text)
    
    return text

def validate_phone(phone: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if not phone:
        return False
    
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
    clean_phone = re.sub(r'[^\d+]', '', phone)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏ —Ñ–æ—Ä–º–∞—Ç
    if len(clean_phone) == 12 and clean_phone.startswith('+7'):
        return True
    elif len(clean_phone) == 11 and clean_phone.startswith('7'):
        return True
    elif len(clean_phone) == 10:
        return True
    
    return False

def get_service_emoji(service_type: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏"""
    service_emojis = {
        '–≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è': 'üå™Ô∏è',
        '–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä': '‚ùÑÔ∏è',
        '—Ö–æ–ª–æ–¥–∏–ª—å–Ω–æ–µ': 'üßä',
        '–æ–±—â–∞—è': 'üîß'
    }
    
    service_lower = service_type.lower()
    
    for key, emoji in service_emojis.items():
        if key in service_lower:
            return emoji
    
    return 'üîß'

def truncate_text(text: str, max_length: int = 100) -> str:
    """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text
    
    return text[:max_length-3] + "..."

def is_business_hours() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    from datetime import datetime
    
    now = datetime.now()
    
    # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã: 8:00 - 20:00
    if 8 <= now.hour < 20:
        return True
    
    return False

def format_phone_display(phone: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not phone:
        return ""
    
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    digits = re.sub(r'\D', '', phone)
    
    if len(digits) == 11 and digits.startswith('7'):
        return f"+7 ({digits[1:4]}) {digits[4:7]}-{digits[7:9]}-{digits[9:11]}"
    elif len(digits) == 10:
        return f"+7 ({digits[0:3]}) {digits[3:6]}-{digits[6:8]}-{digits[8:10]}"
    
    return phone
